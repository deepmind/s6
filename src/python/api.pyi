# Copyright 2021 The s6 Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS-IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from typing import Any

from typing import overload

class CompilationFailedError(Exception): ...

class NotCompiledError(Exception): ...

class S6CodeDetail:
    def __init__(self, *args, **kwargs) -> None: ...
    def deoptimize(self) -> None: ...
    def force_compile(self) -> None: ...
    @property
    def is_compiled(self) -> bool: ...
    @property
    def strongjit(self) -> str: ...

class S6JitCallable:
    def __init__(self, *args, **kwargs) -> None: ...
    def _evaluate(self, *args, **kwargs) -> handle: ...
    def _interpret(self, *args, **kwargs) -> handle: ...
    def __call__(self, *args, **kwargs) -> handle: ...
    def __get__(self, arg0: object, arg1: object) -> S6JitCallable: ...
    @property
    def fn(self) -> function: ...

class S6Profile:
    def __init__(self, *args, **kwargs) -> None: ...
    def export_as_pprof(self, arg0: str, url: bool = ...) -> str: ...
    @overload
    def prune_common_frames(self) -> S6Profile: ...
    @overload
    def prune_common_frames() -> Any: ...
    @property
    def sample_count(self) -> int: ...

class S6ProfileCallable:
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    @property
    def fn(self) -> object: ...

def inspect(fn: object) -> S6CodeDetail: ...
def jit(fn: function) -> object: ...
@overload
def profile(callable: object) -> S6ProfileCallable: ...
@overload
def profile(f) -> Any: ...
